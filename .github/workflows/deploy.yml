name: Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENVIRONMENT=${{ github.event.inputs.environment }}
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            ENVIRONMENT=production
          else
            ENVIRONMENT=staging
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENVIRONMENT"

      - name: Validate deployment readiness
        run: |
          echo "Validating deployment readiness..."
          # Check if all required secrets are available
          if [[ "${{ steps.environment.outputs.environment }}" == "production" ]]; then
            if [[ -z "${{ secrets.SUPABASE_URL }}" ]] || [[ -z "${{ secrets.SUPABASE_ANON_KEY }}" ]]; then
              echo "Missing required production secrets"
              exit 1
            fi
          fi
          echo "Deployment validation passed"

  # Build production image
  build:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: pre-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production build
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.pre-deployment.outputs.version }}
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_ANALYTICS_ID: ${{ secrets.ANALYTICS_ID }}

      - name: Validate build output
        run: |
          echo "Validating build output..."
          if [[ ! -f "dist/index.html" ]]; then
            echo "Build failed: index.html not found"
            exit 1
          fi
          
          # Check bundle sizes
          MAIN_BUNDLE_SIZE=$(find dist/assets -name "index-*.js" -exec stat -c%s {} \; | head -1)
          MAX_BUNDLE_SIZE=1048576  # 1MB
          if [[ $MAIN_BUNDLE_SIZE -gt $MAX_BUNDLE_SIZE ]]; then
            echo "Bundle size ($MAIN_BUNDLE_SIZE bytes) exceeds limit ($MAX_BUNDLE_SIZE bytes)"
            exit 1
          fi
          
          echo "Build validation passed"

      - name: Compress build artifacts
        run: |
          cd dist
          find . -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" \) \
            -exec gzip -k9 {} \;

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}
          path: dist/
          retention-days: 30

  # Security scanning of production build
  security-scan:
    name: Production Security Scan
    runs-on: ubuntu-latest
    needs: [pre-deployment, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}
          path: dist/

      - name: Run security headers check
        run: |
          echo "Checking security headers..."
          # Check for CSP, HSTS, etc. in built files
          if ! grep -q "Content-Security-Policy" dist/index.html; then
            echo "Warning: CSP header not found in built files"
          fi

      - name: Check for sensitive data exposure
        run: |
          echo "Scanning for sensitive data..."
          # Check for accidentally exposed secrets
          if grep -r "sk_live_\|pk_live_\|access_token" dist/; then
            echo "Potential sensitive data found in build"
            exit 1
          fi

      - name: Validate environment variables
        run: |
          echo "Validating environment configuration..."
          # Ensure no development URLs are in production build
          if grep -r "localhost\|127.0.0.1\|dev\|staging" dist/assets/; then
            echo "Development URLs found in production build"
            exit 1
          fi

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, security-scan]
    if: needs.pre-deployment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-cybersecurity-platform.netlify.app
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}
          path: dist/

      - name: Deploy to Netlify Staging
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-deploy: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Staging deployment v${{ needs.pre-deployment.outputs.version }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          sleep 30  # Wait for deployment to be ready
          curl -f https://staging-cybersecurity-platform.netlify.app/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, security-scan]
    if: needs.pre-deployment.outputs.environment == 'production'
    environment:
      name: production
      url: https://cybersecurity-platform.netlify.app
    steps:
      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}
          path: dist/

      - name: Deploy to Netlify Production
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production deployment v${{ needs.pre-deployment.outputs.version }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://cybersecurity-platform.netlify.app',
              description: 'Production deployment successful'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

  # Post-deployment checks
  post-deployment:
    name: Post-deployment Checks
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production]
    if: needs.pre-deployment.outputs.environment == 'production'
    steps:
      - name: Health check
        run: |
          echo "Running production health checks..."
          sleep 60  # Wait for deployment to propagate
          
          # Basic health check
          curl -f https://cybersecurity-platform.netlify.app/health || exit 1
          
          # Check critical pages
          curl -f https://cybersecurity-platform.netlify.app/ || exit 1
          curl -f https://cybersecurity-platform.netlify.app/dashboard || exit 1

      - name: Performance validation
        run: |
          echo "Validating production performance..."
          npm install -g lighthouse
          lighthouse --output=json --output-path=prod-lighthouse.json \
            --chrome-flags="--headless" \
            https://cybersecurity-platform.netlify.app/
          
          PERFORMANCE_SCORE=$(cat prod-lighthouse.json | jq '.categories.performance.score * 100')
          MIN_SCORE=85
          if (( $(echo "$PERFORMANCE_SCORE < $MIN_SCORE" | bc -l) )); then
            echo "Production performance score ($PERFORMANCE_SCORE) below minimum ($MIN_SCORE)"
            exit 1
          fi

      - name: Security validation
        run: |
          echo "Validating production security..."
          
          # Check security headers
          SECURITY_HEADERS="X-Frame-Options X-Content-Type-Options Strict-Transport-Security"
          for header in $SECURITY_HEADERS; do
            if ! curl -s -I https://cybersecurity-platform.netlify.app/ | grep -q "$header"; then
              echo "Missing security header: $header"
              exit 1
            fi
          done

      - name: Update monitoring
        run: |
          echo "Updating monitoring systems..."
          # This would typically update monitoring dashboards, alerting rules, etc.
          # For now, we'll just log the deployment
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment",
              "environment": "production",
              "version": "${{ needs.pre-deployment.outputs.version }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' || true

  # Notification
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production, post-deployment]
    if: success()
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            ✅ Production deployment successful!
            Version: ${{ needs.pre-deployment.outputs.version }}
            Environment: ${{ needs.pre-deployment.outputs.environment }}
            URL: https://cybersecurity-platform.netlify.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, security-scan, deploy-production, post-deployment]
    if: failure()
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ❌ Production deployment failed!
            Version: ${{ needs.pre-deployment.outputs.version }}
            Environment: ${{ needs.pre-deployment.outputs.environment }}
            Please check the logs and take immediate action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}